# -*- coding: utf-8 -*-
"""Lit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EHBx7TZYkOsVeSY_N3thVshGRU9drxkU
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Set Seaborn theme
sns.set_theme(style="whitegrid")

# Load sample dataset directly (replace with your local path)
data = pd.read_csv("/Users/suvradattabanik/Downloads/Imports_Exports_Dataset.csv")  # Modify this path to your actual CSV file

# Show the dataset preview before allowing users to interact with it
st.title("Interactive Trade Data Dashboard")
st.write("Data Preview:")
st.dataframe(data.head())

# Interactive data editing
st.write("Manually edit the data below:")
editable_data = st.experimental_data_editor(data)

# Data filtering
st.sidebar.header("Data Filters")

# Filter by years
editable_data['Date'] = pd.to_datetime(editable_data['Date'], format='%d-%m-%Y')
years = editable_data['Date'].dt.year.unique()
selected_years = st.sidebar.multiselect("Select Year(s)", options=years, default=years)

# Filter by Country
countries = editable_data['Country'].unique()
selected_countries = st.sidebar.multiselect("Select Country(s)", options=countries, default=countries)

# Filter by Category
categories = editable_data['Category'].unique()
selected_categories = st.sidebar.multiselect("Select Category(s)", options=categories, default=categories)

# Filter by Shipping Method
shipping_methods = editable_data['Shipping_Method'].unique()
selected_shipping_methods = st.sidebar.multiselect("Select Shipping Method(s)", options=shipping_methods, default=shipping_methods)

# Filter by Payment Terms
payment_terms = editable_data['Payment_Terms'].unique()
selected_payment_terms = st.sidebar.multiselect("Select Payment Term(s)", options=payment_terms, default=payment_terms)

# Apply filters
filtered_data = editable_data[
    (editable_data['Date'].dt.year.isin(selected_years)) &
    (editable_data['Country'].isin(selected_countries)) &
    (editable_data['Category'].isin(selected_categories)) &
    (editable_data['Shipping_Method'].isin(selected_shipping_methods)) &
    (editable_data['Payment_Terms'].isin(selected_payment_terms))
]

# Display filtered data
st.write("Filtered Data:")
st.dataframe(filtered_data)

# Line Chart of Trade Value Over Time
st.subheader("Line Chart of Trade Value Over Time")
monthly_trend = filtered_data.groupby(pd.Grouper(key='Date', freq='M')).sum().reset_index()

plt.figure(figsize=(10, 6))
sns.lineplot(data=monthly_trend, x='Date', y='Value', marker='o')
plt.xticks(rotation=45)
st.pyplot(plt)

# Stacked Bar Chart: Payment Terms Distribution
st.subheader("Stacked Bar Chart: Payment Terms Distribution")
payment_terms_counts = filtered_data.groupby(['Payment_Terms', 'Import_Export']).size().unstack(fill_value=0)

plt.figure(figsize=(10, 6))
payment_terms_counts.plot(kind='bar', stacked=True, color=sns.color_palette("Set2"))
plt.title('Payment Terms for Imports and Exports')
plt.xticks(rotation=45)
plt.tight_layout()
st.pyplot(plt)

# Scatter Plot: Weight vs Trade Value
st.subheader("Scatter Plot of Weight vs Trade Value")
plt.figure(figsize=(10, 6))
sns.scatterplot(data=filtered_data, x='Weight', y='Value', hue='Import_Export', palette='Set1', s=100)
plt.axhline(0, color='gray', linestyle='--')
st.pyplot(plt)

# Histograms: Distribution of Quantities Traded Across Categories
st.subheader("Histogram of Quantities Traded Across Categories")
plt.figure(figsize=(10, 6))
sns.histplot(data=filtered_data, x='Quantity', hue='Category', multiple='stack', kde=True, bins=10, palette='Set2')
plt.title('Distribution of Quantities Traded Across Categories')
plt.tight_layout()
st.pyplot(plt)

# Joint Plot: Quantity vs Trade Value by Category
st.subheader("Joint Plot of Quantity vs Trade Value by Category")
plt.figure(figsize=(10, 6))
sns.jointplot(data=filtered_data, x='Quantity', y='Value', hue='Category', palette='Set2', kind="scatter", height=7)
plt.tight_layout()
st.pyplot(plt)

# Download the modified data
csv = filtered_data.to_csv(index=False)
st.download_button(label="Download Updated Data", data=csv, mime='text/csv')